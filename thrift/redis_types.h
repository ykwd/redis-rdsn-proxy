/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef redis_TYPES_H
#define redis_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace redisproxy {

class batch_string;

typedef struct _batch_string__isset {
  _batch_string__isset() : values(false) {}
  bool values :1;
} _batch_string__isset;

class batch_string {
 public:

  batch_string(const batch_string&);
  batch_string& operator=(const batch_string&);
  batch_string() {
  }

  virtual ~batch_string() throw();
  std::vector<std::string>  values;

  _batch_string__isset __isset;

  void __set_values(const std::vector<std::string> & val);

  bool operator == (const batch_string & rhs) const
  {
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const batch_string &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const batch_string & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(batch_string &a, batch_string &b);

inline std::ostream& operator<<(std::ostream& out, const batch_string& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
